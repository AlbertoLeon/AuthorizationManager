@model AutorizationManager.MVCSite.Models.ClientRestrictionScopesViewModel

@{
    ViewBag.Title = "Edit RestrictionScopes";
}
<div ng-controller="managerRestrictionScopesCtrl">
    <h2>Edit RestrictionScopes for @Model.ClientDisplayName</h2>
    <div class="panel panel-default col-md-6 column">
        <div class="panel-heading">Default scopes</div>
        <div class="panel-body">
            <div class="col-md-6 row">
                <div class="list-group">
                    <div class="list-group-item" ngrepeat="defaultScope in defaultScopes">
                        <authscope ng-model="defaultScope"></authscope>
                    </div>
                </div>
            </div>
            <div class="col-md-6 row">
                <div class="list-group">
                    <div class="list-group-item" ngrepeat="customScope in customScopes">
                        <authscope ng-model="customScope"></authscope>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular.min.js"></script>
    <script src="~/Scripts/ManageRestrictionScopes/controller.js"></script>
    <script src="~/Scripts/ManageRestrictionScopes/directive.js"></script>
    <script type="text/javascript">
    var defaultScopes = @Html.Raw(@Model.DefaultScopes);
    var customScopes = @Html.Raw(@Model.CustomScopes);
        var restrictionScopes =@(!String.IsNullOrWhiteSpace(Model.ScopeRestrictions) ? Html.Raw(Model.ScopeRestrictions).ToString() : "{{}}");
    var app = angular.module('manageRestrictionScopes', []);
    app.value("config", {
        defaultScopes: defaultScopes,
        customScopes: customScopes,
        currentScopes: restrictionScopes,
        addScopeUrl:'@Url.Action("AddRestrictionScope")',
        removeScopeUrl:'@Url.Action("RemoveRestrictionScope")'
    });

    angular.bootstrap(document, ['manageRestrictionScopes']);
    </script>
}
